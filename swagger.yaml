# 
# Generated by
# 
#      _____ _          __  __      _     _
#     / ____| |        / _|/ _|    | |   | |
#    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
#     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
#     ____) |   < (_| | | | || (_) | | (_| |  __/ |
#    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
#
# The code generator that works in many programming languages
#
#			https://www.skaffolder.com
#
#
# You can generate the code from the command-line
#       https://npmjs.com/package/skaffolder-cli
#
#       npm install -g skaffodler-cli
#
#   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #
#
# To remove this comment please upgrade your plan here: 
#      https://app.skaffolder.com/#!/upgrade
#
# Or get up to 70% discount sharing your unique link:
#       https://app.skaffolder.com/#!/register?friend=5ea3476182f82d390e77c9df
#
# You will get 10% discount for each one of your friends
# 
#

openapi: 3.0.0
info:
  title: SchoolMangementSoftware
  description: You can obtain JWT token from login API
  version: 0.1
servers:
  - url: http://localhost:3000/api
    description: Local server for testing
paths:
  /login:
    post:
      summary: Login API
      security: []   # No security
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              example:   # Sample object
                username: admin
                password: 62f264d7ad826f02a8af714c0a54b197935b717656b80461686d450f7b3abde4c553541515de2052b9af70f710f0cd8a1a2d3f4d60aa72608d71a63a9a93c0f5
      responses:
        '200':
          description: OK
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /verifyToken:
    post:
      summary: Verify token API
      security: [] #No security
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /changePassword:
    post:
      summary: Change password API
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                passwordNew:
                  type: string
                passwordOld:
                  type: string
      responses:
        '200':
          description: OK
                

  #-----  Attendence  -----
  /attendence/:
    post:
      summary: CRUD ACTION create
      tags:
        - Attendence
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attendence"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                attendence:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - Attendence
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Attendence"
    
  /attendence/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - Attendence
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - Attendence
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attendence"
    post:
      summary: CRUD ACTION update
      tags:
        - Attendence
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attendence"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Attendence"
    
  /attendence/findBy_Exam/{key}:
    get:
      summary: CRUD ACTION findBy_Exam
      tags:
        - Attendence
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Attendence"
    
  /attendence/findBy_Teacher/{key}:
    get:
      summary: CRUD ACTION findBy_Teacher
      tags:
        - Attendence
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Attendence"
    
  /attendence/findBy_course/{key}:
    get:
      summary: CRUD ACTION findBy_course
      tags:
        - Attendence
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Attendence"
    
  /attendence/findBy_student/{key}:
    get:
      summary: CRUD ACTION findBy_student
      tags:
        - Attendence
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Attendence"
    
  #-----  Exam  -----
  /exam/:
    post:
      summary: CRUD ACTION create
      tags:
        - Exam
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Marks:
                  type: number
    get:
      summary: CRUD ACTION list
      tags:
        - Exam
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Exam"
    
  /exam/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - Exam
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - Exam
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exam"
    post:
      summary: CRUD ACTION update
      tags:
        - Exam
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Exam"
    
  /exam/findBy_Teacher/{key}:
    get:
      summary: CRUD ACTION findBy_Teacher
      tags:
        - Exam
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Exam"
    
  /exam/findBy_course/{key}:
    get:
      summary: CRUD ACTION findBy_course
      tags:
        - Exam
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Exam"
    
  /exam/findBy_student/{key}:
    get:
      summary: CRUD ACTION findBy_student
      tags:
        - Exam
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Exam"
    
  #-----  Teacher  -----
  /teacher/:
    post:
      summary: CRUD ACTION create
      tags:
        - Teacher
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teacher"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Course:
                  type: string
                LastName:
                  type: string
                Name:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - Teacher
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Teacher"
    
  /teacher/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - Teacher
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - Teacher
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teacher"
    post:
      summary: CRUD ACTION update
      tags:
        - Teacher
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teacher"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Teacher"
    
  /teacher/findBy_course/{key}:
    get:
      summary: CRUD ACTION findBy_course
      tags:
        - Teacher
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Teacher"
    
  #-----  User  -----
  /user/{id}/changePassword:
    post:
      summary: Change password of user from admin
      tags:
        - User
      responses:
        "200":
          description: OK
    
  /user/:
    post:
      summary: CRUD ACTION create
      tags:
        - User
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mail:
                  type: string
                name:
                  type: string
                password:
                  type: string
                roles:
                  type: string
                surname:
                  type: string
                username:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - User
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    
  /user/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    post:
      summary: CRUD ACTION update
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
    
  /user/{id}/validate:
    get:
      summary: This API is Used to validate the Endpoint
      security: []   # No security
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: ID is used for validation
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    
  #-----  course  -----
  /course/:
    post:
      summary: CRUD ACTION create
      tags:
        - course
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/course"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - course
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/course"
    
  /course/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - course
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - course
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/course"
    post:
      summary: CRUD ACTION update
      tags:
        - course
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/course"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/course"
    
  #-----  student  -----
  /student/:
    post:
      summary: CRUD ACTION create
      tags:
        - student
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/student"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Class:
                  type: string
                Dob:
                  type: integer
                Name:
                  type: string
                Rank:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - student
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/student"
    
  /student/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - student
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - student
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/student"
    post:
      summary: CRUD ACTION update
      tags:
        - student
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/student"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/student"
    
  /student/findBy_course/{key}:
    get:
      summary: CRUD ACTION findBy_course
      tags:
        - student
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/student"
    
    
  #-----  User  -----
  /Users/{id}/changePassword:
    post:
      summary: Change password by admin API
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                passwordNew:
                  type: string
                passwordAdmin:
                  type: string
      responses:
        '200':
          description: OK
  /Users/{id}:
    post:
      summary: Update User API
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
    delete:
      summary: Delete User API
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /Users:
    post:
      summary: Create User API
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: 'string'
                password: 
                  type: 'string'
                mail: 
                  type: 'string'
                name: 
                  type: 'string'
                surname: 
                  type: 'string'
                roles: 
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    
# JWT security
security:
  - bearerAuth: [] 
  
  
# Components
components:

  # Security
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes

  # Data Model
  schemas:
    User:
      properties:
        username:
          type: 'string'
        password: 
          type: 'string'
        mail: 
          type: 'string'
        name: 
          type: 'string'
        surname: 
          type: 'string'
        roles: 
          type: array
          items:
            type: string
      required:
        - username
        - password
        

    Attendence:
      properties:
        _id:
          type: string
        attendence:
          type: string
      required:
        -  _id
      
    
    Exam:
      properties:
        _id:
          type: string
        Marks:
          type: number
      required:
        -  _id
        - Marks
      
    
    Teacher:
      properties:
        _id:
          type: string
        Course:
          type: string
        LastName:
          type: string
        Name:
          type: string
      required:
        -  _id
        - Name
      
    
    User:
      properties:
        _id:
          type: string
        mail:
          type: string
        name:
          type: string
        password:
          type: string
        roles:
          type: string
        surname:
          type: string
        username:
          type: string
      required:
        -  _id
        - password
        - username
      
    
    course:
      properties:
        _id:
          type: string
        Name:
          type: string
      required:
        -  _id
        - Name
      
    
    student:
      properties:
        _id:
          type: string
        Class:
          type: string
        Dob:
          type: integer
        Name:
          type: string
        Rank:
          type: string
      required:
        -  _id
        - Name
      
    
